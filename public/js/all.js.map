{"version":3,"sources":["pubsub.js","ajax-helpers.js","app.js"],"names":[],"mappingstBA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["/*\t\n\n\tjQuery pub/sub plugin by Peter Higgins (dante@dojotoolkit.org)\n\n\tLoosely based on Dojo publish/subscribe API, limited in scope. Rewritten blindly.\n\n\tOriginal is (c) Dojo Foundation 2004-2010. Released under either AFL or new BSD, see:\n\thttp://dojofoundation.org/license for more information.\n\n*/\t\n\n;(function(d){\n\n\t// the topic/subscription hash\n\tvar cache = {};\n\n\td.publish = function(/* String */topic, /* Array? */args){\n\t\t// summary: \n\t\t//\t\tPublish some data on a named topic.\n\t\t// topic: String\n\t\t//\t\tThe channel to publish on\n\t\t// args: Array?\n\t\t//\t\tThe data to publish. Each array item is converted into an ordered\n\t\t//\t\targuments on the subscribed functions. \n\t\t//\n\t\t// example:\n\t\t//\t\tPublish stuff on '/some/topic'. Anything subscribed will be called\n\t\t//\t\twith a function signature like: function(a,b,c){ ... }\n\t\t//\n\t\t//\t|\t\t$.publish(\"/some/topic\", [\"a\",\"b\",\"c\"]);\n\t\tcache[topic] && d.each(cache[topic], function(){\n\t\t\tthis.apply(d, args || []);\n\t\t});\n\t};\n\n\td.subscribe = function(/* String */topic, /* Function */callback){\n\t\t// summary:\n\t\t//\t\tRegister a callback on a named topic.\n\t\t// topic: String\n\t\t//\t\tThe channel to subscribe to\n\t\t// callback: Function\n\t\t//\t\tThe handler event. Anytime something is $.publish'ed on a \n\t\t//\t\tsubscribed channel, the callback will be called with the\n\t\t//\t\tpublished array as ordered arguments.\n\t\t//\n\t\t// returns: Array\n\t\t//\t\tA handle which can be used to unsubscribe this particular subscription.\n\t\t//\t\n\t\t// example:\n\t\t//\t|\t$.subscribe(\"/some/topic\", function(a, b, c){ /* handle data */ });\n\t\t//\n\t\tif(!cache[topic]){\n\t\t\tcache[topic] = [];\n\t\t}\n\t\tcache[topic].push(callback);\n\t\treturn [topic, callback]; // Array\n\t};\n\n\td.unsubscribe = function(/* Array */handle){\n\t\t// summary:\n\t\t//\t\tDisconnect a subscribed function for a topic.\n\t\t// handle: Array\n\t\t//\t\tThe return value from a $.subscribe call.\n\t\t// example:\n\t\t//\t|\tvar handle = $.subscribe(\"/something\", function(){});\n\t\t//\t|\t$.unsubscribe(handle);\n\t\t\n\t\tvar t = handle[0];\n\t\tcache[t] && d.each(cache[t], function(idx){\n\t\t\tif(this == handle[1]){\n\t\t\t\tcache[t].splice(idx, 1);\n\t\t\t}\n\t\t});\n\t};\n\n})(jQuery);\n\n","(function() {\r\n\r\n    // Async submit a form's input.\r\n    var submitAjaxRequest = function(e) {\r\n        var form = $(this);\r\n        var method = form.find('input[name=\"_method\"]').val() || 'POST';\r\n\r\n        $.ajax({\r\n            type: method,\r\n            url: form.prop('action'),\r\n            data: form.serialize(),\r\n            success: function() {\r\n                $.publish('form.submitted', form);\r\n            }\r\n        });\r\n\r\n        e.preventDefault();\r\n    };\r\n\r\n    // Forms marked with the \"data-remote\" attribute will submit via AJAX\r\n    $('form[data-remote]').on('submit', submitAjaxRequest);\r\n\r\n})();","(function() {\r\n\r\n\t$.subscribe('form.submitted', function() {\r\n            $('.flash').fadeIn(500).delay(1000).fadeOut(500);\r\n        });\r\n\r\n})();"],"sourceRoot":"/source/"}